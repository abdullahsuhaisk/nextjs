{"ast":null,"code":"var __jsx = React.createElement;\n\n/* eslint-disable no-new */\nimport React, { useRef, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport ResizeSensor from \"css-element-queries/src/ResizeSensor\";\nimport { throttle } from \"lodash\";\nconst aspectRatio = 1.777;\n\nconst OverlayPortal = props => {\n  const {\n    container\n  } = props;\n  const containerRef = useRef();\n  const [layout, setLayout] = useState({});\n  const updateLayout = useCallback(() => {\n    const containerWidth = 800;\n    const containerHeight = 454;\n    const containerAspectRatio = containerWidth / containerHeight;\n    let rightLeftMargin = 0;\n    let topBottomMargin = 0;\n\n    if (containerAspectRatio >= aspectRatio) {\n      const width = containerHeight * aspectRatio;\n      rightLeftMargin = Math.round((containerWidth - width) / 2);\n    } else {\n      const height = containerWidth / aspectRatio;\n      topBottomMargin = Math.round((containerHeight - height) / 2);\n    }\n\n    const alayout = {\n      __typename: \"Layout\",\n      width: containerWidth,\n      height: containerHeight,\n      safeArea: {\n        __typename: \"SafeArea\",\n        top: topBottomMargin,\n        right: rightLeftMargin,\n        bottom: topBottomMargin,\n        left: rightLeftMargin\n      }\n    };\n    setLayout(alayout);\n    console.log(layout); // if (apolloClientRef.current) {\n    //   const data = {\n    //     layout: {\n    //       __typename: \"Layout\",\n    //       width: containerWidth,\n    //       height: containerHeight,\n    //       safeArea: {\n    //         __typename: \"SafeArea\",\n    //         top: topBottomMargin,\n    //         right: rightLeftMargin,\n    //         bottom: topBottomMargin,\n    //         left: rightLeftMargin\n    //       }\n    //     }\n    //   };\n    //   apolloClientRef.current.writeData({ data });\n    // }\n  }, []);\n  useEffect(() => {\n    updateLayout();\n    new ResizeSensor(containerRef.current, throttle(updateLayout, 100));\n  }, []);\n  const children = React.Children.map(props.children, (child, index) => {\n    return React.cloneElement(child, {\n      // PassToProps\n      container,\n      layout\n    });\n  });\n  return ReactDOM.createPortal(__jsx(\"div\", {\n    ref: containerRef,\n    className: \"overlay-container\",\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"100%\",\n      pointerEvents: \"auto\"\n    }\n  }, children), container);\n};\n\nOverlayPortal.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default OverlayPortal;","map":{"version":3,"sources":["D:/Projects/ClickAbleImage/with-ant-design/components/overlay/OverlayPortal.js"],"names":["React","useRef","useEffect","useCallback","PropTypes","ReactDOM","ResizeSensor","throttle","aspectRatio","OverlayPortal","props","container","containerRef","layout","setLayout","useState","updateLayout","containerWidth","containerHeight","containerAspectRatio","rightLeftMargin","topBottomMargin","width","Math","round","height","alayout","__typename","safeArea","top","right","bottom","left","console","log","current","children","Children","map","child","index","cloneElement","createPortal","position","pointerEvents","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable no-new */\r\nimport React, { useRef, useEffect, useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ResizeSensor from \"css-element-queries/src/ResizeSensor\";\r\nimport { throttle } from \"lodash\";\r\n\r\nconst aspectRatio = 1.777;\r\n\r\nconst OverlayPortal = props => {\r\n  const { container } = props;\r\n  const containerRef = useRef();\r\n  const [layout, setLayout] = useState({});\r\n\r\n  const updateLayout = useCallback(() => {\r\n    const containerWidth = 800;\r\n    const containerHeight = 454;\r\n    const containerAspectRatio = containerWidth / containerHeight;\r\n    let rightLeftMargin = 0;\r\n    let topBottomMargin = 0;\r\n\r\n    if (containerAspectRatio >= aspectRatio) {\r\n      const width = containerHeight * aspectRatio;\r\n      rightLeftMargin = Math.round((containerWidth - width) / 2);\r\n    } else {\r\n      const height = containerWidth / aspectRatio;\r\n      topBottomMargin = Math.round((containerHeight - height) / 2);\r\n    }\r\n    const alayout = {\r\n      __typename: \"Layout\",\r\n      width: containerWidth,\r\n      height: containerHeight,\r\n      safeArea: {\r\n        __typename: \"SafeArea\",\r\n        top: topBottomMargin,\r\n        right: rightLeftMargin,\r\n        bottom: topBottomMargin,\r\n        left: rightLeftMargin\r\n      }\r\n    };\r\n    setLayout(alayout);\r\n    console.log(layout);\r\n    // if (apolloClientRef.current) {\r\n    //   const data = {\r\n    //     layout: {\r\n    //       __typename: \"Layout\",\r\n    //       width: containerWidth,\r\n    //       height: containerHeight,\r\n    //       safeArea: {\r\n    //         __typename: \"SafeArea\",\r\n    //         top: topBottomMargin,\r\n    //         right: rightLeftMargin,\r\n    //         bottom: topBottomMargin,\r\n    //         left: rightLeftMargin\r\n    //       }\r\n    //     }\r\n    //   };\r\n\r\n    //   apolloClientRef.current.writeData({ data });\r\n    // }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    updateLayout();\r\n    new ResizeSensor(containerRef.current, throttle(updateLayout, 100));\r\n  }, []);\r\n\r\n  const children = React.Children.map(props.children, (child, index) => {\r\n    return React.cloneElement(child, {\r\n      // PassToProps\r\n      container,\r\n      layout\r\n    });\r\n  });\r\n\r\n  return ReactDOM.createPortal(\r\n    <div\r\n      ref={containerRef}\r\n      className=\"overlay-container\"\r\n      style={{\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        pointerEvents: \"auto\"\r\n      }}\r\n    >\r\n      {children}\r\n    </div>,\r\n    container\r\n  );\r\n};\r\nOverlayPortal.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default OverlayPortal;\r\n"]},"metadata":{},"sourceType":"module"}