{"ast":null,"code":"var __jsx = React.createElement;\n\n/* eslint-disable no-new */\nimport React, { useRef, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport ResizeSensor from \"css-element-queries/src/ResizeSensor\";\nimport { throttle } from \"lodash\";\nvar aspectRatio = 1.777;\n\nvar OverlayPortal = function OverlayPortal(_ref) {\n  var children = _ref.children,\n      container = _ref.container;\n  var containerRef = useRef();\n  var updateLayout = useCallback(function () {\n    var containerWidth = 800;\n    var containerHeight = 454;\n    var containerAspectRatio = containerWidth / containerHeight;\n    var rightLeftMargin = 0;\n    var topBottomMargin = 0;\n\n    if (containerAspectRatio >= aspectRatio) {\n      var width = containerHeight * aspectRatio;\n      rightLeftMargin = Math.round((containerWidth - width) / 2);\n    } else {\n      var height = containerWidth / aspectRatio;\n      topBottomMargin = Math.round((containerHeight - height) / 2);\n    }\n\n    if (apolloClientRef.current) {\n      var data = {\n        layout: {\n          __typename: \"Layout\",\n          width: containerWidth,\n          height: containerHeight,\n          safeArea: {\n            __typename: \"SafeArea\",\n            top: topBottomMargin,\n            right: rightLeftMargin,\n            bottom: topBottomMargin,\n            left: rightLeftMargin\n          }\n        }\n      };\n      apolloClientRef.current.writeData({\n        data: data\n      });\n    }\n  }, []);\n  useEffect(function () {\n    updateLayout();\n    new ResizeSensor(containerRef.current, throttle(updateLayout, 100));\n  }, []);\n  return ReactDOM.createPortal(__jsx(\"div\", {\n    ref: containerRef,\n    className: \"overlay-container\",\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"100%\",\n      pointerEvents: \"none\"\n    }\n  }, children), container);\n};\n\nOverlayPortal.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default OverlayPortal;","map":{"version":3,"sources":["D:/Projects/ClickAbleImage/with-ant-design/components/overlay/OverlayPortal.js"],"names":["React","useRef","useEffect","useCallback","PropTypes","ReactDOM","ResizeSensor","throttle","aspectRatio","OverlayPortal","children","container","containerRef","updateLayout","containerWidth","containerHeight","containerAspectRatio","rightLeftMargin","topBottomMargin","width","Math","round","height","apolloClientRef","current","data","layout","__typename","safeArea","top","right","bottom","left","writeData","createPortal","position","pointerEvents","propTypes","node","isRequired"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,SAASC,QAAT,QAAyB,QAAzB;AAEA,IAAMC,WAAW,GAAG,KAApB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAA6B;AAAA,MAA1BC,QAA0B,QAA1BA,QAA0B;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;AACjD,MAAMC,YAAY,GAAGX,MAAM,EAA3B;AACA,MAAMY,YAAY,GAAGV,WAAW,CAAC,YAAM;AACrC,QAAMW,cAAc,GAAG,GAAvB;AACA,QAAMC,eAAe,GAAG,GAAxB;AACA,QAAMC,oBAAoB,GAAGF,cAAc,GAAGC,eAA9C;AACA,QAAIE,eAAe,GAAG,CAAtB;AACA,QAAIC,eAAe,GAAG,CAAtB;;AAEA,QAAIF,oBAAoB,IAAIR,WAA5B,EAAyC;AACvC,UAAMW,KAAK,GAAGJ,eAAe,GAAGP,WAAhC;AACAS,MAAAA,eAAe,GAAGG,IAAI,CAACC,KAAL,CAAW,CAACP,cAAc,GAAGK,KAAlB,IAA2B,CAAtC,CAAlB;AACD,KAHD,MAGO;AACL,UAAMG,MAAM,GAAGR,cAAc,GAAGN,WAAhC;AACAU,MAAAA,eAAe,GAAGE,IAAI,CAACC,KAAL,CAAW,CAACN,eAAe,GAAGO,MAAnB,IAA6B,CAAxC,CAAlB;AACD;;AACD,QAAIC,eAAe,CAACC,OAApB,EAA6B;AAC3B,UAAMC,IAAI,GAAG;AACXC,QAAAA,MAAM,EAAE;AACNC,UAAAA,UAAU,EAAE,QADN;AAENR,UAAAA,KAAK,EAAEL,cAFD;AAGNQ,UAAAA,MAAM,EAAEP,eAHF;AAINa,UAAAA,QAAQ,EAAE;AACRD,YAAAA,UAAU,EAAE,UADJ;AAERE,YAAAA,GAAG,EAAEX,eAFG;AAGRY,YAAAA,KAAK,EAAEb,eAHC;AAIRc,YAAAA,MAAM,EAAEb,eAJA;AAKRc,YAAAA,IAAI,EAAEf;AALE;AAJJ;AADG,OAAb;AAeAM,MAAAA,eAAe,CAACC,OAAhB,CAAwBS,SAAxB,CAAkC;AAAER,QAAAA,IAAI,EAAJA;AAAF,OAAlC;AACD;AACF,GAhC+B,EAgC7B,EAhC6B,CAAhC;AAkCAvB,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,YAAY;AACZ,QAAIP,YAAJ,CAAiBM,YAAY,CAACY,OAA9B,EAAuCjB,QAAQ,CAACM,YAAD,EAAe,GAAf,CAA/C;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SAAOR,QAAQ,CAAC6B,YAAT,CACL;AACE,IAAA,GAAG,EAAEtB,YADP;AAEE,IAAA,SAAS,EAAC,mBAFZ;AAGE,IAAA,KAAK,EAAE;AACLuB,MAAAA,QAAQ,EAAE,UADL;AAELhB,MAAAA,KAAK,EAAE,MAFF;AAGLG,MAAAA,MAAM,EAAE,MAHH;AAILc,MAAAA,aAAa,EAAE;AAJV;AAHT,KAUG1B,QAVH,CADK,EAaLC,SAbK,CAAP;AAeD,CAxDD;;AAyDAF,aAAa,CAAC4B,SAAd,GAA0B;AACxB3B,EAAAA,QAAQ,EAAEN,SAAS,CAACkC,IAAV,CAAeC;AADD,CAA1B;AAIA,eAAe9B,aAAf","sourcesContent":["/* eslint-disable no-new */\r\nimport React, { useRef, useEffect, useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ResizeSensor from \"css-element-queries/src/ResizeSensor\";\r\nimport { throttle } from \"lodash\";\r\n\r\nconst aspectRatio = 1.777;\r\n\r\nconst OverlayPortal = ({ children, container }) => {\r\n  const containerRef = useRef();\r\n  const updateLayout = useCallback(() => {\r\n    const containerWidth = 800;\r\n    const containerHeight = 454;\r\n    const containerAspectRatio = containerWidth / containerHeight;\r\n    let rightLeftMargin = 0;\r\n    let topBottomMargin = 0;\r\n\r\n    if (containerAspectRatio >= aspectRatio) {\r\n      const width = containerHeight * aspectRatio;\r\n      rightLeftMargin = Math.round((containerWidth - width) / 2);\r\n    } else {\r\n      const height = containerWidth / aspectRatio;\r\n      topBottomMargin = Math.round((containerHeight - height) / 2);\r\n    }\r\n    if (apolloClientRef.current) {\r\n      const data = {\r\n        layout: {\r\n          __typename: \"Layout\",\r\n          width: containerWidth,\r\n          height: containerHeight,\r\n          safeArea: {\r\n            __typename: \"SafeArea\",\r\n            top: topBottomMargin,\r\n            right: rightLeftMargin,\r\n            bottom: topBottomMargin,\r\n            left: rightLeftMargin\r\n          }\r\n        }\r\n      };\r\n\r\n      apolloClientRef.current.writeData({ data });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    updateLayout();\r\n    new ResizeSensor(containerRef.current, throttle(updateLayout, 100));\r\n  }, []);\r\n\r\n  return ReactDOM.createPortal(\r\n    <div\r\n      ref={containerRef}\r\n      className=\"overlay-container\"\r\n      style={{\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        pointerEvents: \"none\"\r\n      }}\r\n    >\r\n      {children}\r\n    </div>,\r\n    container\r\n  );\r\n};\r\nOverlayPortal.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default OverlayPortal;\r\n"]},"metadata":{},"sourceType":"module"}