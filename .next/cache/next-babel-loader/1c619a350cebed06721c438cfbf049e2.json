{"ast":null,"code":"var __jsx = React.createElement;\n\n/* eslint-disable no-new */\nimport React, { useRef, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactDOM from \"react-dom\";\nimport ResizeSensor from \"css-element-queries/src/ResizeSensor\";\nimport { throttle } from \"lodash\";\nconst aspectRatio = 1.777;\n\nconst OverlayPortal = ({\n  children,\n  container\n}) => {\n  //   const containerRef = useRef();\n  const updateLayout = useCallback(() => {\n    const containerWidth = containerRef.current.clientWidth;\n    const containerHeight = containerRef.current.clientHeight;\n    const containerAspectRatio = containerWidth / containerHeight;\n    let rightLeftMargin = 0;\n    let topBottomMargin = 0;\n\n    if (containerAspectRatio >= aspectRatio) {\n      const width = containerHeight * aspectRatio;\n      rightLeftMargin = Math.round((containerWidth - width) / 2);\n    } else {\n      const height = containerWidth / aspectRatio;\n      topBottomMargin = Math.round((containerHeight - height) / 2);\n    }\n\n    if (apolloClientRef.current) {\n      const data = {\n        layout: {\n          __typename: \"Layout\",\n          width: containerWidth,\n          height: containerHeight,\n          safeArea: {\n            __typename: \"SafeArea\",\n            top: topBottomMargin,\n            right: rightLeftMargin,\n            bottom: topBottomMargin,\n            left: rightLeftMargin\n          }\n        }\n      };\n      apolloClientRef.current.writeData({\n        data\n      });\n    }\n  }, []);\n  useEffect(() => {\n    updateLayout();\n    new ResizeSensor(containerRef.current, throttle(updateLayout, 100));\n  }, []);\n  return ReactDOM.createPortal(__jsx(\"div\", {\n    ref: containerRef,\n    className: \"overlay-container\",\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"100%\",\n      pointerEvents: \"none\"\n    }\n  }, children), container);\n};\n\nOverlayPortal.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default OverlayPortal;","map":{"version":3,"sources":["D:/Projects/ClickAbleImage/with-ant-design/components/overlay/OverlayPortal.js"],"names":["React","useRef","useEffect","useCallback","PropTypes","ReactDOM","ResizeSensor","throttle","aspectRatio","OverlayPortal","children","container","updateLayout","containerWidth","containerRef","current","clientWidth","containerHeight","clientHeight","containerAspectRatio","rightLeftMargin","topBottomMargin","width","Math","round","height","apolloClientRef","data","layout","__typename","safeArea","top","right","bottom","left","writeData","createPortal","position","pointerEvents","propTypes","node","isRequired"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,SAASC,QAAT,QAAyB,QAAzB;AAEA,MAAMC,WAAW,GAAG,KAApB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6B;AACjD;AACA,QAAMC,YAAY,GAAGT,WAAW,CAAC,MAAM;AACrC,UAAMU,cAAc,GAAGC,YAAY,CAACC,OAAb,CAAqBC,WAA5C;AACA,UAAMC,eAAe,GAAGH,YAAY,CAACC,OAAb,CAAqBG,YAA7C;AACA,UAAMC,oBAAoB,GAAGN,cAAc,GAAGI,eAA9C;AACA,QAAIG,eAAe,GAAG,CAAtB;AACA,QAAIC,eAAe,GAAG,CAAtB;;AAEA,QAAIF,oBAAoB,IAAIX,WAA5B,EAAyC;AACvC,YAAMc,KAAK,GAAGL,eAAe,GAAGT,WAAhC;AACAY,MAAAA,eAAe,GAAGG,IAAI,CAACC,KAAL,CAAW,CAACX,cAAc,GAAGS,KAAlB,IAA2B,CAAtC,CAAlB;AACD,KAHD,MAGO;AACL,YAAMG,MAAM,GAAGZ,cAAc,GAAGL,WAAhC;AACAa,MAAAA,eAAe,GAAGE,IAAI,CAACC,KAAL,CAAW,CAACP,eAAe,GAAGQ,MAAnB,IAA6B,CAAxC,CAAlB;AACD;;AACD,QAAIC,eAAe,CAACX,OAApB,EAA6B;AAC3B,YAAMY,IAAI,GAAG;AACXC,QAAAA,MAAM,EAAE;AACNC,UAAAA,UAAU,EAAE,QADN;AAENP,UAAAA,KAAK,EAAET,cAFD;AAGNY,UAAAA,MAAM,EAAER,eAHF;AAINa,UAAAA,QAAQ,EAAE;AACRD,YAAAA,UAAU,EAAE,UADJ;AAERE,YAAAA,GAAG,EAAEV,eAFG;AAGRW,YAAAA,KAAK,EAAEZ,eAHC;AAIRa,YAAAA,MAAM,EAAEZ,eAJA;AAKRa,YAAAA,IAAI,EAAEd;AALE;AAJJ;AADG,OAAb;AAeAM,MAAAA,eAAe,CAACX,OAAhB,CAAwBoB,SAAxB,CAAkC;AAAER,QAAAA;AAAF,OAAlC;AACD;AACF,GAhC+B,EAgC7B,EAhC6B,CAAhC;AAkCAzB,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,YAAY;AACZ,QAAIN,YAAJ,CAAiBQ,YAAY,CAACC,OAA9B,EAAuCR,QAAQ,CAACK,YAAD,EAAe,GAAf,CAA/C;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SAAOP,QAAQ,CAAC+B,YAAT,CACL;AACE,IAAA,GAAG,EAAEtB,YADP;AAEE,IAAA,SAAS,EAAC,mBAFZ;AAGE,IAAA,KAAK,EAAE;AACLuB,MAAAA,QAAQ,EAAE,UADL;AAELf,MAAAA,KAAK,EAAE,MAFF;AAGLG,MAAAA,MAAM,EAAE,MAHH;AAILa,MAAAA,aAAa,EAAE;AAJV;AAHT,KAUG5B,QAVH,CADK,EAaLC,SAbK,CAAP;AAeD,CAxDD;;AAyDAF,aAAa,CAAC8B,SAAd,GAA0B;AACxB7B,EAAAA,QAAQ,EAAEN,SAAS,CAACoC,IAAV,CAAeC;AADD,CAA1B;AAIA,eAAehC,aAAf","sourcesContent":["/* eslint-disable no-new */\r\nimport React, { useRef, useEffect, useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ResizeSensor from \"css-element-queries/src/ResizeSensor\";\r\nimport { throttle } from \"lodash\";\r\n\r\nconst aspectRatio = 1.777;\r\n\r\nconst OverlayPortal = ({ children, container }) => {\r\n  //   const containerRef = useRef();\r\n  const updateLayout = useCallback(() => {\r\n    const containerWidth = containerRef.current.clientWidth;\r\n    const containerHeight = containerRef.current.clientHeight;\r\n    const containerAspectRatio = containerWidth / containerHeight;\r\n    let rightLeftMargin = 0;\r\n    let topBottomMargin = 0;\r\n\r\n    if (containerAspectRatio >= aspectRatio) {\r\n      const width = containerHeight * aspectRatio;\r\n      rightLeftMargin = Math.round((containerWidth - width) / 2);\r\n    } else {\r\n      const height = containerWidth / aspectRatio;\r\n      topBottomMargin = Math.round((containerHeight - height) / 2);\r\n    }\r\n    if (apolloClientRef.current) {\r\n      const data = {\r\n        layout: {\r\n          __typename: \"Layout\",\r\n          width: containerWidth,\r\n          height: containerHeight,\r\n          safeArea: {\r\n            __typename: \"SafeArea\",\r\n            top: topBottomMargin,\r\n            right: rightLeftMargin,\r\n            bottom: topBottomMargin,\r\n            left: rightLeftMargin\r\n          }\r\n        }\r\n      };\r\n\r\n      apolloClientRef.current.writeData({ data });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    updateLayout();\r\n    new ResizeSensor(containerRef.current, throttle(updateLayout, 100));\r\n  }, []);\r\n\r\n  return ReactDOM.createPortal(\r\n    <div\r\n      ref={containerRef}\r\n      className=\"overlay-container\"\r\n      style={{\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        pointerEvents: \"none\"\r\n      }}\r\n    >\r\n      {children}\r\n    </div>,\r\n    container\r\n  );\r\n};\r\nOverlayPortal.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default OverlayPortal;\r\n"]},"metadata":{},"sourceType":"module"}