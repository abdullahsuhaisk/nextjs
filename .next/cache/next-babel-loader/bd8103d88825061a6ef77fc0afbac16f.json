{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'isomorphic-unfetch';\nimport clientCredentials from '../credentials/client';\nexport default class Index extends Component {\n  static async getInitialProps({\n    req,\n    query\n  }) {\n    const user = req && req.session ? req.session.decodedToken : null; // don't fetch anything from firebase if the user is not found\n    // const snap = user && await req.firebaseServer.database().ref('messages').once('value')\n    // const messages = snap && snap.val()\n\n    const messages = null;\n    return {\n      user,\n      messages\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: this.props.user,\n      value: '',\n      messages: this.props.messages\n    };\n    this.addDbListener = this.addDbListener.bind(this);\n    this.removeDbListener = this.removeDbListener.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    firebase.initializeApp(clientCredentials);\n    if (this.state.user) this.addDbListener();\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({\n          user: user\n        });\n        return user.getIdToken().then(token => {\n          // eslint-disable-next-line no-undef\n          return fetch('/api/login', {\n            method: 'POST',\n            // eslint-disable-next-line no-undef\n            headers: new Headers({\n              'Content-Type': 'application/json'\n            }),\n            credentials: 'same-origin',\n            body: _JSON$stringify({\n              token\n            })\n          });\n        }).then(res => this.addDbListener());\n      } else {\n        this.setState({\n          user: null\n        }); // eslint-disable-next-line no-undef\n\n        fetch('/api/logout', {\n          method: 'POST',\n          credentials: 'same-origin'\n        }).then(() => this.removeDbListener());\n      }\n    });\n  }\n\n  addDbListener() {\n    var db = firebase.firestore();\n    let unsubscribe = db.collection('messages').onSnapshot(querySnapshot => {\n      var messages = {};\n      querySnapshot.forEach(function (doc) {\n        messages[doc.id] = doc.data();\n      });\n      if (messages) this.setState({\n        messages\n      });\n    }, error => {\n      console.error(error);\n    });\n    this.setState({\n      unsubscribe\n    });\n  }\n\n  removeDbListener() {\n    // firebase.database().ref('messages').off()\n    if (this.state.unsubscribe) {\n      this.state.unsubscribe();\n    }\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    var db = firebase.firestore();\n    const date = new Date().getTime();\n    db.collection('messages').doc(`${date}`).set({\n      id: date,\n      text: this.state.value\n    });\n    this.setState({\n      value: ''\n    });\n  }\n\n  handleLogin() {\n    firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider());\n  }\n\n  handleLogout() {\n    firebase.auth().signOut();\n  }\n\n  render() {\n    const {\n      user,\n      value,\n      messages\n    } = this.state;\n    return __jsx(\"div\", null, user ? __jsx(\"button\", {\n      onClick: this.handleLogout\n    }, \"Logout\") : __jsx(\"button\", {\n      onClick: this.handleLogin\n    }, \"Login\"), user && __jsx(\"div\", null, __jsx(\"form\", {\n      onSubmit: this.handleSubmit\n    }, __jsx(\"input\", {\n      type: 'text',\n      onChange: this.handleChange,\n      placeholder: 'add message...',\n      value: value\n    })), __jsx(\"ul\", null, messages && _Object$keys(messages).map(key => __jsx(\"li\", {\n      key: key\n    }, messages[key].text)))));\n  }\n\n}","map":{"version":3,"sources":["D:/Projects/ClickAbleImage/with-ant-design/pages/login.js"],"names":["React","Component","firebase","clientCredentials","Index","getInitialProps","req","query","user","session","decodedToken","messages","constructor","props","state","value","addDbListener","bind","removeDbListener","handleChange","handleSubmit","componentDidMount","initializeApp","auth","onAuthStateChanged","setState","getIdToken","then","token","fetch","method","headers","Headers","credentials","body","res","db","firestore","unsubscribe","collection","onSnapshot","querySnapshot","forEach","doc","id","data","error","console","event","target","preventDefault","date","Date","getTime","set","text","handleLogin","signInWithPopup","GoogleAuthProvider","handleLogout","signOut","render","map","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/auth'\r\nimport 'firebase/firestore'\r\nimport 'isomorphic-unfetch'\r\nimport clientCredentials from '../credentials/client'\r\n\r\nexport default class Index extends Component {\r\n  static async getInitialProps ({ req, query }) {\r\n    const user = req && req.session ? req.session.decodedToken : null\r\n    // don't fetch anything from firebase if the user is not found\r\n    // const snap = user && await req.firebaseServer.database().ref('messages').once('value')\r\n    // const messages = snap && snap.val()\r\n    const messages = null\r\n    return { user, messages }\r\n  }\r\n\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      user: this.props.user,\r\n      value: '',\r\n      messages: this.props.messages\r\n    }\r\n\r\n    this.addDbListener = this.addDbListener.bind(this)\r\n    this.removeDbListener = this.removeDbListener.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  }\r\n\r\n  componentDidMount () {\r\n    firebase.initializeApp(clientCredentials)\r\n\r\n    if (this.state.user) this.addDbListener()\r\n\r\n    firebase.auth().onAuthStateChanged(user => {\r\n      if (user) {\r\n        this.setState({ user: user })\r\n        return user\r\n          .getIdToken()\r\n          .then(token => {\r\n            // eslint-disable-next-line no-undef\r\n            return fetch('/api/login', {\r\n              method: 'POST',\r\n              // eslint-disable-next-line no-undef\r\n              headers: new Headers({ 'Content-Type': 'application/json' }),\r\n              credentials: 'same-origin',\r\n              body: JSON.stringify({ token })\r\n            })\r\n          })\r\n          .then(res => this.addDbListener())\r\n      } else {\r\n        this.setState({ user: null })\r\n        // eslint-disable-next-line no-undef\r\n        fetch('/api/logout', {\r\n          method: 'POST',\r\n          credentials: 'same-origin'\r\n        }).then(() => this.removeDbListener())\r\n      }\r\n    })\r\n  }\r\n\r\n  addDbListener () {\r\n    var db = firebase.firestore()\r\n    let unsubscribe = db.collection('messages').onSnapshot(\r\n      querySnapshot => {\r\n        var messages = {}\r\n        querySnapshot.forEach(function (doc) {\r\n          messages[doc.id] = doc.data()\r\n        })\r\n        if (messages) this.setState({ messages })\r\n      },\r\n      error => {\r\n        console.error(error)\r\n      }\r\n    )\r\n    this.setState({ unsubscribe })\r\n  }\r\n\r\n  removeDbListener () {\r\n    // firebase.database().ref('messages').off()\r\n    if (this.state.unsubscribe) {\r\n      this.state.unsubscribe()\r\n    }\r\n  }\r\n\r\n  handleChange (event) {\r\n    this.setState({ value: event.target.value })\r\n  }\r\n\r\n  handleSubmit (event) {\r\n    event.preventDefault()\r\n    var db = firebase.firestore()\r\n    const date = new Date().getTime()\r\n    db.collection('messages')\r\n      .doc(`${date}`)\r\n      .set({\r\n        id: date,\r\n        text: this.state.value\r\n      })\r\n    this.setState({ value: '' })\r\n  }\r\n\r\n  handleLogin () {\r\n    firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider())\r\n  }\r\n\r\n  handleLogout () {\r\n    firebase.auth().signOut()\r\n  }\r\n\r\n  render () {\r\n    const { user, value, messages } = this.state\r\n\r\n    return (\r\n      <div>\r\n        {user ? (\r\n          <button onClick={this.handleLogout}>Logout</button>\r\n        ) : (\r\n          <button onClick={this.handleLogin}>Login</button>\r\n        )}\r\n        {user && (\r\n          <div>\r\n            <form onSubmit={this.handleSubmit}>\r\n              <input\r\n                type={'text'}\r\n                onChange={this.handleChange}\r\n                placeholder={'add message...'}\r\n                value={value}\r\n              />\r\n            </form>\r\n            <ul>\r\n              {messages &&\r\n                Object.keys(messages).map(key => (\r\n                  <li key={key}>{messages[key].text}</li>\r\n                ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}