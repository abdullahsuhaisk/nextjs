{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'isomorphic-unfetch';\nimport clientCredentials from '../credentials/client';\n\nvar Index =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Index, _Component);\n\n  _createClass(Index, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var req, query, user, messages;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                req = _ref.req, query = _ref.query;\n                user = req && req.session ? req.session.decodedToken : null; // don't fetch anything from firebase if the user is not found\n                // const snap = user && await req.firebaseServer.database().ref('messages').once('value')\n                // const messages = snap && snap.val()\n\n                messages = null;\n                return _context.abrupt(\"return\", {\n                  user: user,\n                  messages: messages\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.state = {\n      user: _this.props.user,\n      value: '',\n      messages: _this.props.messages\n    };\n    _this.addDbListener = _this.addDbListener.bind(_assertThisInitialized(_this));\n    _this.removeDbListener = _this.removeDbListener.bind(_assertThisInitialized(_this));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      firebase.initializeApp(clientCredentials);\n      if (this.state.user) this.addDbListener();\n      firebase.auth().onAuthStateChanged(function (user) {\n        if (user) {\n          _this2.setState({\n            user: user\n          });\n\n          return user.getIdToken().then(function (token) {\n            // eslint-disable-next-line no-undef\n            return fetch('/api/login', {\n              method: 'POST',\n              // eslint-disable-next-line no-undef\n              headers: new Headers({\n                'Content-Type': 'application/json'\n              }),\n              credentials: 'same-origin',\n              body: _JSON$stringify({\n                token: token\n              })\n            });\n          }).then(function (res) {\n            return _this2.addDbListener();\n          });\n        } else {\n          _this2.setState({\n            user: null\n          }); // eslint-disable-next-line no-undef\n\n\n          fetch('/api/logout', {\n            method: 'POST',\n            credentials: 'same-origin'\n          }).then(function () {\n            return _this2.removeDbListener();\n          });\n        }\n      });\n    }\n  }, {\n    key: \"addDbListener\",\n    value: function addDbListener() {\n      var _this3 = this;\n\n      var db = firebase.firestore();\n      var unsubscribe = db.collection('messages').onSnapshot(function (querySnapshot) {\n        var messages = {};\n        querySnapshot.forEach(function (doc) {\n          messages[doc.id] = doc.data();\n        });\n        if (messages) _this3.setState({\n          messages: messages\n        });\n      }, function (error) {\n        console.error(error);\n      });\n      this.setState({\n        unsubscribe: unsubscribe\n      });\n    }\n  }, {\n    key: \"removeDbListener\",\n    value: function removeDbListener() {\n      // firebase.database().ref('messages').off()\n      if (this.state.unsubscribe) {\n        this.state.unsubscribe();\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        value: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      event.preventDefault();\n      var db = firebase.firestore();\n      var date = new Date().getTime();\n      db.collection('messages').doc(\"\".concat(date)).set({\n        id: date,\n        text: this.state.value\n      });\n      this.setState({\n        value: ''\n      });\n    }\n  }, {\n    key: \"handleLogin\",\n    value: function handleLogin() {\n      firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider());\n    }\n  }, {\n    key: \"handleLogout\",\n    value: function handleLogout() {\n      firebase.auth().signOut();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          user = _this$state.user,\n          value = _this$state.value,\n          messages = _this$state.messages;\n      return __jsx(\"div\", null, user ? __jsx(\"button\", {\n        onClick: this.handleLogout\n      }, \"Logout\") : __jsx(\"button\", {\n        onClick: this.handleLogin\n      }, \"Login\"), user && __jsx(\"div\", null, __jsx(\"form\", {\n        onSubmit: this.handleSubmit\n      }, __jsx(\"input\", {\n        type: 'text',\n        onChange: this.handleChange,\n        placeholder: 'add message...',\n        value: value\n      })), __jsx(\"ul\", null, messages && _Object$keys(messages).map(function (key) {\n        return __jsx(\"li\", {\n          key: key\n        }, messages[key].text);\n      }))));\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nexport { Index as default };","map":{"version":3,"sources":["D:/Projects/ClickAbleImage/with-ant-design/pages/login.js"],"names":["React","Component","firebase","clientCredentials","Index","req","query","user","session","decodedToken","messages","props","state","value","addDbListener","bind","removeDbListener","handleChange","handleSubmit","initializeApp","auth","onAuthStateChanged","setState","getIdToken","then","token","fetch","method","headers","Headers","credentials","body","res","db","firestore","unsubscribe","collection","onSnapshot","querySnapshot","forEach","doc","id","data","error","console","event","target","preventDefault","date","Date","getTime","set","text","signInWithPopup","GoogleAuthProvider","signOut","handleLogout","handleLogin","map","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/auth'\r\nimport 'firebase/firestore'\r\nimport 'isomorphic-unfetch'\r\nimport clientCredentials from '../credentials/client'\r\n\r\nexport default class Index extends Component {\r\n  static async getInitialProps ({ req, query }) {\r\n    const user = req && req.session ? req.session.decodedToken : null\r\n    // don't fetch anything from firebase if the user is not found\r\n    // const snap = user && await req.firebaseServer.database().ref('messages').once('value')\r\n    // const messages = snap && snap.val()\r\n    const messages = null\r\n    return { user, messages }\r\n  }\r\n\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      user: this.props.user,\r\n      value: '',\r\n      messages: this.props.messages\r\n    }\r\n\r\n    this.addDbListener = this.addDbListener.bind(this)\r\n    this.removeDbListener = this.removeDbListener.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  }\r\n\r\n  componentDidMount () {\r\n    firebase.initializeApp(clientCredentials)\r\n\r\n    if (this.state.user) this.addDbListener()\r\n\r\n    firebase.auth().onAuthStateChanged(user => {\r\n      if (user) {\r\n        this.setState({ user: user })\r\n        return user\r\n          .getIdToken()\r\n          .then(token => {\r\n            // eslint-disable-next-line no-undef\r\n            return fetch('/api/login', {\r\n              method: 'POST',\r\n              // eslint-disable-next-line no-undef\r\n              headers: new Headers({ 'Content-Type': 'application/json' }),\r\n              credentials: 'same-origin',\r\n              body: JSON.stringify({ token })\r\n            })\r\n          })\r\n          .then(res => this.addDbListener())\r\n      } else {\r\n        this.setState({ user: null })\r\n        // eslint-disable-next-line no-undef\r\n        fetch('/api/logout', {\r\n          method: 'POST',\r\n          credentials: 'same-origin'\r\n        }).then(() => this.removeDbListener())\r\n      }\r\n    })\r\n  }\r\n\r\n  addDbListener () {\r\n    var db = firebase.firestore()\r\n    let unsubscribe = db.collection('messages').onSnapshot(\r\n      querySnapshot => {\r\n        var messages = {}\r\n        querySnapshot.forEach(function (doc) {\r\n          messages[doc.id] = doc.data()\r\n        })\r\n        if (messages) this.setState({ messages })\r\n      },\r\n      error => {\r\n        console.error(error)\r\n      }\r\n    )\r\n    this.setState({ unsubscribe })\r\n  }\r\n\r\n  removeDbListener () {\r\n    // firebase.database().ref('messages').off()\r\n    if (this.state.unsubscribe) {\r\n      this.state.unsubscribe()\r\n    }\r\n  }\r\n\r\n  handleChange (event) {\r\n    this.setState({ value: event.target.value })\r\n  }\r\n\r\n  handleSubmit (event) {\r\n    event.preventDefault()\r\n    var db = firebase.firestore()\r\n    const date = new Date().getTime()\r\n    db.collection('messages')\r\n      .doc(`${date}`)\r\n      .set({\r\n        id: date,\r\n        text: this.state.value\r\n      })\r\n    this.setState({ value: '' })\r\n  }\r\n\r\n  handleLogin () {\r\n    firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider())\r\n  }\r\n\r\n  handleLogout () {\r\n    firebase.auth().signOut()\r\n  }\r\n\r\n  render () {\r\n    const { user, value, messages } = this.state\r\n\r\n    return (\r\n      <div>\r\n        {user ? (\r\n          <button onClick={this.handleLogout}>Logout</button>\r\n        ) : (\r\n          <button onClick={this.handleLogin}>Login</button>\r\n        )}\r\n        {user && (\r\n          <div>\r\n            <form onSubmit={this.handleSubmit}>\r\n              <input\r\n                type={'text'}\r\n                onChange={this.handleChange}\r\n                placeholder={'add message...'}\r\n                value={value}\r\n              />\r\n            </form>\r\n            <ul>\r\n              {messages &&\r\n                Object.keys(messages).map(key => (\r\n                  <li key={key}>{messages[key].text}</li>\r\n                ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}