{"version":3,"file":"static/webpack/static\\development\\pages\\image.js.9e4977469408c3704b97.hot-update.js","sources":["webpack:///./components/overlay/OverlayPortal.js"],"sourcesContent":["/* eslint-disable no-new */\r\nimport React, { useRef, useEffect, useCallback, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ResizeSensor from \"css-element-queries/src/ResizeSensor\";\r\nimport { throttle } from \"lodash\";\r\n\r\nconst aspectRatio = 1.777;\r\n\r\nconst OverlayPortal = props => {\r\n  const { container } = props;\r\n  const containerRef = useRef();\r\n  const [layout, setLayout] = useState({});\r\n\r\n  const updateLayout = useCallback(() => {\r\n    const containerWidth = 800;\r\n    const containerHeight = 454;\r\n    const containerAspectRatio = containerWidth / containerHeight;\r\n    let rightLeftMargin = 0;\r\n    let topBottomMargin = 0;\r\n\r\n    if (containerAspectRatio >= aspectRatio) {\r\n      const width = containerHeight * aspectRatio;\r\n      rightLeftMargin = Math.round((containerWidth - width) / 2);\r\n    } else {\r\n      const height = containerWidth / aspectRatio;\r\n      topBottomMargin = Math.round((containerHeight - height) / 2);\r\n    }\r\n    const alayout = {\r\n      __typename: \"Layout\",\r\n      width: containerWidth,\r\n      height: containerHeight,\r\n      safeArea: {\r\n        __typename: \"SafeArea\",\r\n        top: topBottomMargin,\r\n        right: rightLeftMargin,\r\n        bottom: topBottomMargin,\r\n        left: rightLeftMargin\r\n      }\r\n    };\r\n    setLayout(alayout);\r\n    console.log(layout);\r\n    console.log(alayout);\r\n\r\n    // if (apolloClientRef.current) {\r\n    //   const data = {\r\n    //     layout: {\r\n    //       __typename: \"Layout\",\r\n    //       width: containerWidth,\r\n    //       height: containerHeight,\r\n    //       safeArea: {\r\n    //         __typename: \"SafeArea\",\r\n    //         top: topBottomMargin,\r\n    //         right: rightLeftMargin,\r\n    //         bottom: topBottomMargin,\r\n    //         left: rightLeftMargin\r\n    //       }\r\n    //     }\r\n    //   };\r\n\r\n    //   apolloClientRef.current.writeData({ data });\r\n    // }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    updateLayout();\r\n    new ResizeSensor(containerRef.current, throttle(updateLayout, 100));\r\n  }, []);\r\n\r\n  const children = React.Children.map(props.children, (child, index) => {\r\n    return React.cloneElement(child, {\r\n      // PassToProps\r\n      container,\r\n      layout\r\n    });\r\n  });\r\n\r\n  return ReactDOM.createPortal(\r\n    <div\r\n      ref={containerRef}\r\n      className=\"overlay-container\"\r\n      style={{\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        pointerEvents: \"auto\"\r\n      }}\r\n    >\r\n      {children}\r\n    </div>,\r\n    container\r\n  );\r\n};\r\nOverlayPortal.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default OverlayPortal;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAJA;AAYA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAcA;AACA;AAAA;AACA;AADA;AAIA;;;;A","sourceRoot":""}